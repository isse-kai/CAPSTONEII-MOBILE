{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/gradient/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,IAAI,kBAAkB,EAAE,MAAM,sBAAsB,CAAA;AAC3E,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AACzC,OAAO,IAAI,MAAM,aAAa,CAAA;AAE9B,OAAO,EACL,MAAM,EACN,cAAc,GAIf,MAAM,SAAS,CAAA;AAChB,OAAO,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAA;AAcrC,MAAM,IAAI,GAAG,MAAM,CACjB,KAAK,CAAC,IAAI,CACR,SAAS,QAAQ,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,KAAK,EAAS;IACrE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,GAAG,cAAc,EAAE,CAAC,KAAK,CAAA;IACvE,4DAA4D;IAC5D,MAAM,iBAAiB,GAAG,CAAC,UAAyB,EAAE,EAAE;QACtD,6DAA6D;QAC7D,OAAO,CACL,UAAU,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACxB,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAC9C,IAAI,EAAE,CACR,CAAA;IACH,CAAC,CAAA;IAED,IAAI,cAAc,GAAa,EAAE,CAAA;IAEjC,IAAI,QAAQ,EAAE;QACZ,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,EAAE;YAChC,OAAO,CAAC,KAAK,CACX,kDAAkD;gBAChD,QAAQ;gBACR,oDAAoD;gBACpD,QAAQ;gBACR,8HAA8H,CACjI,CAAA;SACF;aAAM,IACL,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC3C,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,IAAI,QAAQ,CAAC,EACrE;YACA,OAAO,CAAC,KAAK,CACX,kDAAkD;gBAChD,QAAQ;gBACR,sDAAsD;gBACtD,QAAQ;gBACR,mFAAmF;gBACnF,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC;gBAC3C,8BAA8B,CACjC,CAAA;SACF;QACD,cAAc,GAAG,iBAAiB;QAChC,gDAAgD;QAChD,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CACjD,CAAA;KACF;IACD,IAAI,MAAM,EAAE;QACV,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAA;KAC3C;IACD,OAAO,CACL,CAAC,kBAAkB,CACjB,IAAI,KAAK,CAAC,CACV,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,UAAU,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC,CACzD,MAAM,CAAC,CAAC,cAAc,CAAC,EACvB,CACH,CAAA;AACH,CAAC,EACD,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,CAC1C,CACF,EAAE,CAAA;AAEH,MAAM,UAAU,QAAQ,CAAC,KAAwC;IAC/D,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,EAAG,CAAA;AAC5B,CAAC","sourcesContent":["import { LinearGradient as ExpoLinearGradient } from 'expo-linear-gradient'\nimport React from 'react'\nimport { StyleSheet } from 'react-native'\nimport hash from 'stable-hash'\n\nimport {\n  styled,\n  useDripsyTheme,\n  DripsyFinalTheme,\n  DripsyBaseTheme,\n  ColorPath,\n} from '../core'\nimport { get } from '../core/css/get'\n\ntype Props<Theme extends DripsyBaseTheme = DripsyFinalTheme> = Omit<\n  React.ComponentProps<typeof ExpoLinearGradient>,\n  'colors'\n> & {\n  gradient?: Extract<keyof Theme['linearGradients'], string>\n  colors?: (ColorPath | (string & {}))[]\n  /*\n   * Set to `true` if you're using the gradient for a background.\n   */\n  stretch?: boolean\n}\n\nconst Grad = styled(\n  React.memo(\n    function Gradient({ style, stretch, gradient, colors, ...props }: Props) {\n      const { colors: themeColors, linearGradients } = useDripsyTheme().theme\n      // Helper function to map colors to appropriate theme colors\n      const colorArrayToTheme = (colorArray: typeof colors) => {\n        // Return an empty array if the colors come back as undefined\n        return (\n          colorArray?.map((color) =>\n            themeColors ? get(themeColors, color) : color\n          ) ?? []\n        )\n      }\n\n      let gradientColors: string[] = []\n\n      if (gradient) {\n        if (!linearGradients?.[gradient]) {\n          console.error(\n            '[dripsy/gradient] You passed a \"gradient\" prop \"' +\n              gradient +\n              '\", but your theme doesn\\'t have a linearGradients.' +\n              gradient +\n              \" field. If you want to use colors directly, use the 'colors' prop. Otherwise, add a `linearGradients` section to your theme.\"\n          )\n        } else if (\n          !Array.isArray(linearGradients?.[gradient]) ||\n          linearGradients?.[gradient].some((color) => typeof color != 'string')\n        ) {\n          console.error(\n            '[dripsy/gradient] You passed a \"gradient\" prop \"' +\n              gradient +\n              '\". We looked for this in your theme.linearGradients.' +\n              gradient +\n              \", and it exists. However, it isn't a valid array of strings. Instead, it's this: \" +\n              JSON.stringify(linearGradients?.[gradient]) +\n              '. This is an invalid format.'\n          )\n        }\n        gradientColors = colorArrayToTheme(\n          // Check to make sure the linear gradients exist\n          linearGradients ? linearGradients[gradient] : []\n        )\n      }\n      if (colors) {\n        gradientColors = colorArrayToTheme(colors)\n      }\n      return (\n        <ExpoLinearGradient\n          {...props}\n          style={[stretch && StyleSheet.absoluteFillObject, style]}\n          colors={gradientColors}\n        />\n      )\n    },\n    (prev, next) => hash(prev) === hash(next)\n  )\n)()\n\nexport function Gradient(props: React.ComponentProps<typeof Grad>) {\n  return <Grad {...props} />\n}\n"]}