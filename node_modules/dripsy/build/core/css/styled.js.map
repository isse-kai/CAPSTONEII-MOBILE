{"version":3,"file":"styled.js","sourceRoot":"","sources":["../../../src/core/css/styled.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAA;AAIjE;;;;;;;;;;;;GAYG;AAEH,MAAM,UAAU,MAAM,CAKpB,SAAY,EACZ,EACE,QAAQ,EACR,cAAc,MAIZ,EAAE;IAEN,SAAS,aAAa,CACpB,YAA6D;QAE7D,OAAO,qBAAqB,CAAqB,SAAS,EAAE;YAC1D,cAAc;YACd,QAAQ;YACR,YAAY;SACN,CAAC,CAAA;IACX,CAAC;IAED,OAAO,aAAa,CAAA;AACtB,CAAC","sourcesContent":["import type { ComponentType } from 'react'\nimport { createThemedComponent } from './create-themed-component'\nimport { DripsyFinalTheme } from '../types-v2/declarations'\nimport { MaybeVariantsFromThemeKey, ThemedOptions } from '../types-v2/sx'\n\n/**\n * `styled` is little more than a recreation of `createThemedComponent`, with a nicer API. It does the same thing, but looks a bit nicer to use and has a clean name ðŸ˜‡\n *\n * ```jsx\n * import { Text } from 'react-native'\n *\n * const MyText = styled(Text)({\n *   borderBottomStyle: 'solid',\n *   color: ['primary', 'secondary']\n * })\n * ```\n *\n */\n\nexport function styled<\n  Props,\n  ThemeKey extends keyof DripsyFinalTheme | undefined = undefined,\n  C extends ComponentType<any> = ComponentType<Props>\n>(\n  Component: C,\n  {\n    themeKey,\n    defaultVariant,\n  }: {\n    themeKey?: ThemeKey\n    defaultVariant?: (string & {}) | MaybeVariantsFromThemeKey<ThemeKey>\n  } = {}\n) {\n  function dripsyFactory<Extra>(\n    defaultStyle?: ThemedOptions<Extra, ThemeKey>['defaultStyle']\n  ) {\n    return createThemedComponent<C, Extra, ThemeKey>(Component, {\n      defaultVariant,\n      themeKey,\n      defaultStyle,\n    } as any)\n  }\n\n  return dripsyFactory\n}\n"]}