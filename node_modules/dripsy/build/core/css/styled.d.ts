import type { ComponentType } from 'react';
import { DripsyFinalTheme } from '../types-v2/declarations';
import { MaybeVariantsFromThemeKey, ThemedOptions } from '../types-v2/sx';
/**
 * `styled` is little more than a recreation of `createThemedComponent`, with a nicer API. It does the same thing, but looks a bit nicer to use and has a clean name ðŸ˜‡
 *
 * ```jsx
 * import { Text } from 'react-native'
 *
 * const MyText = styled(Text)({
 *   borderBottomStyle: 'solid',
 *   color: ['primary', 'secondary']
 * })
 * ```
 *
 */
export declare function styled<Props, ThemeKey extends keyof DripsyFinalTheme | undefined = undefined, C extends ComponentType<any> = ComponentType<Props>>(Component: C, { themeKey, defaultVariant, }?: {
    themeKey?: ThemeKey;
    defaultVariant?: (string & {}) | MaybeVariantsFromThemeKey<ThemeKey>;
}): <Extra>(defaultStyle?: import("../types-v2/sx").Sx | ((props: Extra) => import("../types-v2/sx").Sx) | undefined) => import("react").ForwardRefExoticComponent<import("react").PropsWithoutRef<Omit<import("react").PropsWithChildren<C extends ComponentType<infer P> ? P : never>, "variant" | "variants">> & import("../types-v2/sx").StyledProps<ThemeKey> & import("react").RefAttributes<import("react").ElementRef<C>> & Extra>;
//# sourceMappingURL=styled.d.ts.map