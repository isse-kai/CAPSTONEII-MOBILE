import React, { ComponentType, PropsWithChildren } from 'react';
import { DripsyFinalTheme } from '../types-v2/declarations';
import { StyledProps, ThemedOptions } from '../types-v2/sx';
type MergeProps<P1, P2> = Omit<P1, keyof P2> & P2;
type PropsWithoutVariants<P> = Omit<P, 'variant' | 'variants'>;
type PropsWithStyledProps<P, ThemeKey extends keyof DripsyFinalTheme | undefined> = P & StyledProps<ThemeKey>;
export type Props<C, ExtraProps, ThemeKey extends keyof DripsyFinalTheme | undefined> = C extends ComponentType<infer BaseProps> ? MergeProps<PropsWithoutVariants<BaseProps>, PropsWithStyledProps<ExtraProps, ThemeKey>> : never;
type GetProps<C> = C extends ComponentType<infer P> ? P : never;
export declare function createThemedComponent<C extends ComponentType<any>, ExtraProps, ThemeKey extends keyof DripsyFinalTheme | undefined>(Component: C, { defaultStyle: baseStyle, ...options }?: ThemedOptions<ExtraProps, ThemeKey>): React.ForwardRefExoticComponent<React.PropsWithoutRef<Omit<PropsWithChildren<GetProps<C>>, 'variant' | 'variants'>> & StyledProps<ThemeKey> & React.RefAttributes<React.ElementRef<C>> & ExtraProps>;
export {};
//# sourceMappingURL=create-themed-component.d.ts.map