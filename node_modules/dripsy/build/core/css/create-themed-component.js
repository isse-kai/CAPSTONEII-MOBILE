import React from 'react';
import { useDripsyTheme } from '../use-dripsy-theme';
import { useBreakpointIndex } from './breakpoint-context';
import { mapPropsToStyledComponent } from './map-props';
import { useStableMemo } from '../utils/use-stable-memo';
export function createThemedComponent(Component, { defaultStyle: baseStyle, ...options } = {}) {
    const WrappedComponent = React.forwardRef(function Wrapped(prop, ref) {
        const { sx: _sx, as, variant, style, themeKey, variants = options.defaultVariants, ...props } = prop;
        if (typeof __DEV__ !== 'undefined' && typeof as === 'string') {
            console.error(`[dripsy] Looks like you used an invalid "as" prop. "${as}" can't be a string. Please pass a valid React component. HTML elements are not supported.`);
        }
        const defaultStyle = typeof baseStyle == 'function' ? baseStyle(prop) : baseStyle;
        const { theme } = useDripsyTheme();
        // make the sx factory out here so that it's a stable dependency for useStableMemo
        const sx = typeof _sx == 'function' ? _sx(theme) : _sx;
        const breakpoint = useBreakpointIndex();
        const { styles } = useStableMemo(() => mapPropsToStyledComponent({
            theme,
            breakpoint,
            variant,
            sx,
            style,
            variants: variants,
        }, {
            ...options,
            themeKey: themeKey ?? options.themeKey,
            defaultStyle,
        }), [theme, breakpoint, variant, sx, style, variants, themeKey, defaultStyle]);
        const TheComponent = as || Component;
        return (<TheComponent {...props} ref={ref} style={styles} {...{
            variant: variant || options.defaultVariant,
        }}/>);
    });
    WrappedComponent.displayName = `Dripsy.${Component?.displayName ?? 'NoNameComponent'}`;
    return WrappedComponent;
}
//# sourceMappingURL=create-themed-component.js.map