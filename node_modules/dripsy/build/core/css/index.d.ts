import { CSSObject, UseThemeFunction } from '@theme-ui/css';
import { DripsyFinalTheme } from '../types-v2/declarations';
import type { SxProp } from '../types-v2/sx';
type SxProps = SxProp;
type Theme = DripsyFinalTheme;
type CssPropsArgument = ({
    theme?: Theme;
} | Theme) & {
    /**
     * We use this for a custom font family.
     */
    fontFamily?: string;
    themeKey?: keyof DripsyFinalTheme;
};
export type ResponsiveSSRStyles = Exclude<NonNullable<SxProps>, UseThemeFunction>[];
export declare const css: (args?: SxProps, breakpoint?: number) => ({ themeKey, fontFamily: fontFamilyFromProps, ...props }?: CssPropsArgument) => CSSObject;
export declare class Styles {
    static create<T extends {
        [key: string]: NonNullable<SxProps>;
    }>(styles: T): T;
}
export {};
//# sourceMappingURL=index.d.ts.map