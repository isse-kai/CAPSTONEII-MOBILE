export type SmartOmit<T, K extends keyof T> = Omit<T, K>;
export type Keyof<T> = keyof T extends any ? Extract<keyof T, string> : never;
type ValidTest<T> = {
    [K in keyof T]: K;
};
export type AssertTest<T, U extends ValidTest<T>> = `-> ${Extract<keyof T, string>}`;
export type AssertEqual<T, U extends T> = U;
export {};
//# sourceMappingURL=type-helpers.d.ts.map