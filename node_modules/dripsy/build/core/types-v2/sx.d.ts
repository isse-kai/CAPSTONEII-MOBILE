import type { ThemeUICSSProperties } from '@theme-ui/css';
import { DripsyFinalTheme, DripsyThemeWithoutIgnoredKeys } from './declarations';
import type { ImageStyle, TextStyle, ViewStyle } from 'react-native';
import type { Scales, Aliases } from '../css/scales';
import type { DripsyCustomTheme } from './declarations';
import { ComponentType } from 'react';
type ThemeKeysWhichContainVariants = keyof Pick<DripsyThemeWithoutIgnoredKeys<DripsyFinalTheme>, 'alerts' | 'badges' | 'buttons' | 'cards' | 'forms' | 'grids' | 'images' | 'layout' | 'links' | 'messages' | 'shadows' | 'text' | 'textStyles' | 'styles' | 'textShadows'>;
export type ResponsiveValue<T> = T | null | undefined | (null | T | undefined)[] | readonly (null | T | undefined)[];
type WebShadowSx = {
    boxShadow?: ResponsiveValue<(string & {}) | keyof DripsyFinalTheme['shadows']>;
    textShadow?: ResponsiveValue<(string & {}) | keyof DripsyFinalTheme['textShadows']>;
};
type NativeSx = {
    transform?: ReactNativeTypesOnly extends true ? ViewStyle['transform'] : ViewStyle['transform'] | (string & {});
} & {
    animationKeyframes?: Record<string, unknown>;
    animationDuration?: string;
    animationDelay?: string;
} & Pick<ViewStyle, 'shadowOffset'>;
type StyleableSxProperties = Exclude<Exclude<keyof ThemeUICSSProperties, 'textShadow' | 'boxShadow' | 'variant'> | keyof ViewStyle | keyof TextStyle | keyof ImageStyle | keyof DripsyFinalTheme['aliases'], keyof NativeSx | keyof WebShadowSx>;
type NativeStyleProperties = ViewStyle & TextStyle & ImageStyle;
type MaybeNativeStyleValue<StyleKeyOrAlias extends StyleableSxProperties, StyleKey = AliasToStyleKey<StyleKeyOrAlias>> = StyleKey extends keyof NativeStyleProperties ? NativeStyleProperties[StyleKey] : MaybeThemeUiStyle<StyleKeyOrAlias>;
type ReactNativeTypesOnly = NonNullable<DripsyFinalTheme['types']>['reactNativeTypesOnly'] extends true ? true : false;
type OnlyAllowThemeValuesInput<T extends DripsyFinalTheme = DripsyFinalTheme> = 'onlyAllowThemeValues' extends keyof NonNullable<T['types']> ? NonNullable<T['types']>['onlyAllowThemeValues'] : undefined;
type ThemeValuesOnlyForStyleKey<StyleKeyOrAlias extends StyleableSxProperties, Scale extends MaybeScaleFromStyleKeyOrAlias<StyleKeyOrAlias> = MaybeScaleFromStyleKeyOrAlias<StyleKeyOrAlias>> = OnlyAllowThemeValuesInput extends 'always' ? true : OnlyAllowThemeValuesInput extends Record<string, unknown> ? Scale extends keyof OnlyAllowThemeValuesInput ? true : false : false;
type MaybeThemeUiStyle<StyleKey extends StyleableSxProperties> = ReactNativeTypesOnly extends true ? undefined : StyleKey extends keyof ThemeUICSSProperties ? ThemeUICSSProperties[StyleKey] : undefined;
type SxValue<StyleKey extends StyleableSxProperties> = ThemeValuesOnlyForStyleKey<StyleKey> extends true ? MaybeTokenFromStyleKey<StyleKey> : MaybeTokenFromStyleKey<StyleKey> extends undefined ? MaybeNativeStyleValue<StyleKey> | (string & {}) : // we add this string & number thing so that they can use other values from RN. it's the only way i think
MaybeTokenFromStyleKey<StyleKey> | (string & {}) | number;
type FactoryValue<T> = T | ((theme: DripsyFinalTheme) => T | (string & {}) | number);
type AllVariantSets = {
    [K in keyof DripsyCustomTheme as K extends ThemeKeysWhichContainVariants ? K : never]: DripsyFinalTheme[K];
};
type ValueOf<T> = T[keyof T];
type DotPath<T> = ValueOf<{
    [K in keyof T]: `${Extract<K, string | number>}.${Extract<keyof T[K], string | number>}`;
}>;
type DotPathOrKeyOf<T> = ValueOf<{
    [K in keyof T]: T[K] extends Record<string | number, string> ? `${Extract<K, string | number>}.${Extract<keyof T[K], string | number>}` : K;
}>;
export type ColorPath = DotPathOrKeyOf<DripsyFinalTheme['colors']>;
export type Variant = DotPath<AllVariantSets>;
export type Sx = {
    [StyleKey in StyleableSxProperties]?: FactoryValue<ResponsiveValue<SxValue<StyleKey>>>;
} & NativeSx & WebShadowSx & {
    variant?: Variant;
};
export type SxProp = Sx | ((theme: DripsyFinalTheme) => Sx);
type MaybeScaleFromStyleKey<StyleKey extends StyleableSxProperties> = StyleKey extends keyof Scales ? Scales[StyleKey] : undefined;
type MaybeScaleFromStyleKeyOrAlias<StyleKey extends StyleableSxProperties> = MaybeScaleFromStyleKey<AliasToStyleKey<StyleKey>>;
type AliasToStyleKey<StyleKeyOrAlias extends StyleableSxProperties> = StyleKeyOrAlias extends keyof Aliases ? Aliases[StyleKeyOrAlias] : StyleKeyOrAlias extends keyof DripsyFinalTheme['aliases'] ? DripsyFinalTheme['aliases'][StyleKeyOrAlias] : StyleKeyOrAlias;
type MaybeTokensObjectFromScale<Key extends Scales[keyof Scales]> = Key extends keyof DripsyFinalTheme ? DripsyFinalTheme[Key] : never;
type MaybeTokenOptionsFromScale<Key extends Scales[keyof Scales] | undefined> = Key extends Scales[keyof Scales] ? MaybeTokensObjectFromScale<Key> extends Record<string, unknown> ? `${Exclude<DotPathOrKeyOf<MaybeTokensObjectFromScale<Key>>, symbol>}` : undefined : undefined;
type MaybeTokenFromStyleKey<StyleKey extends StyleableSxProperties> = MaybeScaleFromStyleKeyOrAlias<StyleKey> extends undefined ? undefined : MaybeTokenOptionsFromScale<MaybeScaleFromStyleKeyOrAlias<StyleKey>>;
export type MaybeVariantsFromThemeKey<ThemeKey extends keyof DripsyFinalTheme | undefined> = ThemeKey extends keyof DripsyFinalTheme ? DripsyFinalTheme[ThemeKey] extends Record<string, unknown> ? Extract<keyof DripsyFinalTheme[ThemeKey], string> : undefined : undefined;
type VariantProp<ThemeKey extends keyof DripsyFinalTheme | undefined | 'missing'> = ThemeKey extends 'missing' | undefined ? Variant : ThemeKey extends keyof DripsyFinalTheme ? DripsyFinalTheme[ThemeKey] extends undefined ? Variant : MaybeVariantsFromThemeKey<ThemeKey> : undefined;
export type StyledProps<ThemeKey extends keyof DripsyFinalTheme | undefined | 'missing' = 'missing'> = {
    as?: ComponentType;
    variant?: VariantProp<ThemeKey>;
    themeKey?: ThemeKey;
    sx?: SxProp;
    variants?: VariantProp<ThemeKey>[];
};
export type ThemedOptions<ExtraProps, ThemeKey extends Extract<keyof DripsyFinalTheme, string> | undefined> = {
    defaultStyle?: Sx | ((props: ExtraProps) => Sx);
} & {
    defaultVariant?: MaybeVariantsFromThemeKey<ThemeKey> | (string & {});
    /**
     * List of multiple variants
     */
    defaultVariants?: MaybeVariantsFromThemeKey<ThemeKey>[];
    themeKey?: ThemeKey;
};
export {};
//# sourceMappingURL=sx.d.ts.map