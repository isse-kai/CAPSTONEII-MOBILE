{"version":3,"file":"TextInput.js","sourceRoot":"","sources":["../../../src/core/components/TextInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAkB,UAAU,EAAE,MAAM,OAAO,CAAA;AACzD,OAAO,EAAE,SAAS,IAAI,UAAU,EAAE,MAAM,cAAc,CAAA;AAEtD,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAA;AACtE,OAAO,EAAE,gBAAgB,EAAE,MAAM,gBAAgB,CAAA;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAA;AAEpD,OAAO,EAAE,GAAG,EAAE,MAAM,YAAY,CAAA;AAEhC,MAAM,WAAW,GAAG,qBAAqB,CAAC,UAAU,EAAE;IACpD,QAAQ,EAAE,OAAO;IACjB,cAAc,EAAE,OAAO;IACvB,YAAY,EAAE,gBAAgB;CAC/B,CAAC,CAAA;AAcF,MAAM,SAAS,GAA4B;IACzC,cAAc,EAAE,IAAI;IACpB,qBAAqB,EAAE,IAAI;IAC3B,oBAAoB,EAAE,IAAI;CAC3B,CAAA;AAED,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CACjC,SAAS,SAAS,CAAC,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG;IAClC,MAAM,EAAE,KAAK,EAAE,GAAG,cAAc,EAAE,CAAA;IAClC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACrC,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,EAAE,MAAM,EAAE;YAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,CAAW,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAA;SACnE;IACH,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAG,CAAA;AAC7C,CAAC,CACF,CAAA","sourcesContent":["import React, { ComponentProps, forwardRef } from 'react'\nimport { TextInput as rTextInput } from 'react-native'\nimport { DripsyFinalTheme } from '../types-v2/declarations'\nimport { createThemedComponent } from '../css/create-themed-component'\nimport { defaultFontStyle } from './defaultStyle'\nimport { useDripsyTheme } from '../use-dripsy-theme'\nimport { ColorPath, StyledProps } from '../types-v2/sx'\nimport { get } from '../css/get'\n\nconst DripsyInput = createThemedComponent(rTextInput, {\n  themeKey: 'forms',\n  defaultVariant: 'input',\n  defaultStyle: defaultFontStyle,\n})\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof DripsyInput>\ntype ColorKeys = keyof Pick<\n  InputProps,\n  'selectionColor' | 'underlineColorAndroid' | 'placeholderTextColor'\n>\n\nexport type DripsyTextInputProps = StyledProps<'forms'> &\n  Omit<ComponentProps<typeof rTextInput>, ColorKeys> &\n  {\n    [key in ColorKeys]?: (string & {}) | ColorPath\n  }\n\nconst colorKeys: Record<ColorKeys, true> = {\n  selectionColor: true,\n  underlineColorAndroid: true,\n  placeholderTextColor: true,\n}\n\nexport const TextInput = forwardRef<rTextInput, DripsyTextInputProps>(\n  function TextInput({ ...props }, ref) {\n    const { theme } = useDripsyTheme()\n    Object.keys(colorKeys).forEach((key) => {\n      if (props[key] && theme?.colors) {\n        props[key] = get(theme.colors, props[key] as string) ?? props[key]\n      }\n    })\n    return <DripsyInput {...props} ref={ref} />\n  }\n)\n"]}